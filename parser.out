Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DIVIDE
    GREATER
    MINUS
    MULTIPLY

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> LET ID BE expression NEWLINE
Rule 5     statement -> SHOUT STRING NEWLINE
Rule 6     statement -> IF expression LBRACE statements RBRACE
Rule 7     statement -> IF expression LBRACE statements RBRACE ELSE LBRACE statements RBRACE
Rule 8     expression -> NUMBER
Rule 9     expression -> ID
Rule 10    expression -> expression PLUS expression
Rule 11    expression -> expression LESS expression

Terminals, with rules where they appear

BE                   : 4
DIVIDE               : 
ELSE                 : 7
GREATER              : 
ID                   : 4 9
IF                   : 6 7
LBRACE               : 6 7 7
LESS                 : 11
LET                  : 4
MINUS                : 
MULTIPLY             : 
NEWLINE              : 4 5
NUMBER               : 8
PLUS                 : 10
RBRACE               : 6 7 7
SHOUT                : 5
STRING               : 5
error                : 

Nonterminals, with rules where they appear

expression           : 4 6 7 10 10 11 11
program              : 0
statement            : 2 3
statements           : 1 2 6 7 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LET ID BE expression NEWLINE
    (5) statement -> . SHOUT STRING NEWLINE
    (6) statement -> . IF expression LBRACE statements RBRACE
    (7) statement -> . IF expression LBRACE statements RBRACE ELSE LBRACE statements RBRACE

    LET             shift and go to state 4
    SHOUT           shift and go to state 5
    IF              shift and go to state 6

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . LET ID BE expression NEWLINE
    (5) statement -> . SHOUT STRING NEWLINE
    (6) statement -> . IF expression LBRACE statements RBRACE
    (7) statement -> . IF expression LBRACE statements RBRACE ELSE LBRACE statements RBRACE

    $end            reduce using rule 1 (program -> statements .)
    LET             shift and go to state 4
    SHOUT           shift and go to state 5
    IF              shift and go to state 6

    statement                      shift and go to state 7

state 3

    (3) statements -> statement .

    LET             reduce using rule 3 (statements -> statement .)
    SHOUT           reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    RBRACE          reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> LET . ID BE expression NEWLINE

    ID              shift and go to state 8


state 5

    (5) statement -> SHOUT . STRING NEWLINE

    STRING          shift and go to state 9


state 6

    (6) statement -> IF . expression LBRACE statements RBRACE
    (7) statement -> IF . expression LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (8) expression -> . NUMBER
    (9) expression -> . ID
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression LESS expression

    NUMBER          shift and go to state 11
    ID              shift and go to state 12

    expression                     shift and go to state 10

state 7

    (2) statements -> statements statement .

    LET             reduce using rule 2 (statements -> statements statement .)
    SHOUT           reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    RBRACE          reduce using rule 2 (statements -> statements statement .)


state 8

    (4) statement -> LET ID . BE expression NEWLINE

    BE              shift and go to state 13


state 9

    (5) statement -> SHOUT STRING . NEWLINE

    NEWLINE         shift and go to state 14


state 10

    (6) statement -> IF expression . LBRACE statements RBRACE
    (7) statement -> IF expression . LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . LESS expression

    LBRACE          shift and go to state 15
    PLUS            shift and go to state 16
    LESS            shift and go to state 17


state 11

    (8) expression -> NUMBER .

    LBRACE          reduce using rule 8 (expression -> NUMBER .)
    PLUS            reduce using rule 8 (expression -> NUMBER .)
    LESS            reduce using rule 8 (expression -> NUMBER .)
    NEWLINE         reduce using rule 8 (expression -> NUMBER .)


state 12

    (9) expression -> ID .

    LBRACE          reduce using rule 9 (expression -> ID .)
    PLUS            reduce using rule 9 (expression -> ID .)
    LESS            reduce using rule 9 (expression -> ID .)
    NEWLINE         reduce using rule 9 (expression -> ID .)


state 13

    (4) statement -> LET ID BE . expression NEWLINE
    (8) expression -> . NUMBER
    (9) expression -> . ID
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression LESS expression

    NUMBER          shift and go to state 11
    ID              shift and go to state 12

    expression                     shift and go to state 18

state 14

    (5) statement -> SHOUT STRING NEWLINE .

    LET             reduce using rule 5 (statement -> SHOUT STRING NEWLINE .)
    SHOUT           reduce using rule 5 (statement -> SHOUT STRING NEWLINE .)
    IF              reduce using rule 5 (statement -> SHOUT STRING NEWLINE .)
    $end            reduce using rule 5 (statement -> SHOUT STRING NEWLINE .)
    RBRACE          reduce using rule 5 (statement -> SHOUT STRING NEWLINE .)


state 15

    (6) statement -> IF expression LBRACE . statements RBRACE
    (7) statement -> IF expression LBRACE . statements RBRACE ELSE LBRACE statements RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LET ID BE expression NEWLINE
    (5) statement -> . SHOUT STRING NEWLINE
    (6) statement -> . IF expression LBRACE statements RBRACE
    (7) statement -> . IF expression LBRACE statements RBRACE ELSE LBRACE statements RBRACE

    LET             shift and go to state 4
    SHOUT           shift and go to state 5
    IF              shift and go to state 6

    statements                     shift and go to state 19
    statement                      shift and go to state 3

state 16

    (10) expression -> expression PLUS . expression
    (8) expression -> . NUMBER
    (9) expression -> . ID
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression LESS expression

    NUMBER          shift and go to state 11
    ID              shift and go to state 12

    expression                     shift and go to state 20

state 17

    (11) expression -> expression LESS . expression
    (8) expression -> . NUMBER
    (9) expression -> . ID
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression LESS expression

    NUMBER          shift and go to state 11
    ID              shift and go to state 12

    expression                     shift and go to state 21

state 18

    (4) statement -> LET ID BE expression . NEWLINE
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . LESS expression

    NEWLINE         shift and go to state 22
    PLUS            shift and go to state 16
    LESS            shift and go to state 17


state 19

    (6) statement -> IF expression LBRACE statements . RBRACE
    (7) statement -> IF expression LBRACE statements . RBRACE ELSE LBRACE statements RBRACE
    (2) statements -> statements . statement
    (4) statement -> . LET ID BE expression NEWLINE
    (5) statement -> . SHOUT STRING NEWLINE
    (6) statement -> . IF expression LBRACE statements RBRACE
    (7) statement -> . IF expression LBRACE statements RBRACE ELSE LBRACE statements RBRACE

    RBRACE          shift and go to state 23
    LET             shift and go to state 4
    SHOUT           shift and go to state 5
    IF              shift and go to state 6

    statement                      shift and go to state 7

state 20

    (10) expression -> expression PLUS expression .
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . LESS expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
    LBRACE          reduce using rule 10 (expression -> expression PLUS expression .)
    NEWLINE         reduce using rule 10 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 16
    LESS            shift and go to state 17

  ! PLUS            [ reduce using rule 10 (expression -> expression PLUS expression .) ]
  ! LESS            [ reduce using rule 10 (expression -> expression PLUS expression .) ]


state 21

    (11) expression -> expression LESS expression .
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . LESS expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
    LBRACE          reduce using rule 11 (expression -> expression LESS expression .)
    NEWLINE         reduce using rule 11 (expression -> expression LESS expression .)
    PLUS            shift and go to state 16
    LESS            shift and go to state 17

  ! PLUS            [ reduce using rule 11 (expression -> expression LESS expression .) ]
  ! LESS            [ reduce using rule 11 (expression -> expression LESS expression .) ]


state 22

    (4) statement -> LET ID BE expression NEWLINE .

    LET             reduce using rule 4 (statement -> LET ID BE expression NEWLINE .)
    SHOUT           reduce using rule 4 (statement -> LET ID BE expression NEWLINE .)
    IF              reduce using rule 4 (statement -> LET ID BE expression NEWLINE .)
    $end            reduce using rule 4 (statement -> LET ID BE expression NEWLINE .)
    RBRACE          reduce using rule 4 (statement -> LET ID BE expression NEWLINE .)


state 23

    (6) statement -> IF expression LBRACE statements RBRACE .
    (7) statement -> IF expression LBRACE statements RBRACE . ELSE LBRACE statements RBRACE

    LET             reduce using rule 6 (statement -> IF expression LBRACE statements RBRACE .)
    SHOUT           reduce using rule 6 (statement -> IF expression LBRACE statements RBRACE .)
    IF              reduce using rule 6 (statement -> IF expression LBRACE statements RBRACE .)
    $end            reduce using rule 6 (statement -> IF expression LBRACE statements RBRACE .)
    RBRACE          reduce using rule 6 (statement -> IF expression LBRACE statements RBRACE .)
    ELSE            shift and go to state 24


state 24

    (7) statement -> IF expression LBRACE statements RBRACE ELSE . LBRACE statements RBRACE

    LBRACE          shift and go to state 25


state 25

    (7) statement -> IF expression LBRACE statements RBRACE ELSE LBRACE . statements RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LET ID BE expression NEWLINE
    (5) statement -> . SHOUT STRING NEWLINE
    (6) statement -> . IF expression LBRACE statements RBRACE
    (7) statement -> . IF expression LBRACE statements RBRACE ELSE LBRACE statements RBRACE

    LET             shift and go to state 4
    SHOUT           shift and go to state 5
    IF              shift and go to state 6

    statements                     shift and go to state 26
    statement                      shift and go to state 3

state 26

    (7) statement -> IF expression LBRACE statements RBRACE ELSE LBRACE statements . RBRACE
    (2) statements -> statements . statement
    (4) statement -> . LET ID BE expression NEWLINE
    (5) statement -> . SHOUT STRING NEWLINE
    (6) statement -> . IF expression LBRACE statements RBRACE
    (7) statement -> . IF expression LBRACE statements RBRACE ELSE LBRACE statements RBRACE

    RBRACE          shift and go to state 27
    LET             shift and go to state 4
    SHOUT           shift and go to state 5
    IF              shift and go to state 6

    statement                      shift and go to state 7

state 27

    (7) statement -> IF expression LBRACE statements RBRACE ELSE LBRACE statements RBRACE .

    LET             reduce using rule 7 (statement -> IF expression LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    SHOUT           reduce using rule 7 (statement -> IF expression LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    IF              reduce using rule 7 (statement -> IF expression LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    $end            reduce using rule 7 (statement -> IF expression LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    RBRACE          reduce using rule 7 (statement -> IF expression LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 20 resolved as shift
WARNING: shift/reduce conflict for LESS in state 20 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 21 resolved as shift
WARNING: shift/reduce conflict for LESS in state 21 resolved as shift
